worker_processes $NGINX_WORKER_PROCESSES;

user $NGINX_USER $NGINX_GROUP;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
pid /tmp/nginx.pid;
error_log /dev/stderr;

events {
  worker_connections $NGINX_WORKER_CONNECTIONS; # increase if you have lots of clients
  accept_mutex $NGINX_ACCEPT_MUTEX; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  access_log /dev/stdout;
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  sendfile $NGINX_SENDFILE;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:$NGINX_SOCKET_LOCATION fail_timeout=0;

  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen $NGINX_PORT deferred;
    client_max_body_size $NGINX_CLIENT_MAX_BODY_SIZE;

    keepalive_timeout $NGINX_TIMEOUT;

    # path for static files
    root /dev/null;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      # enable this if and only if you use HTTPS
      # proxy_set_header X-Forwarded-Proto https;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }
  }
}
